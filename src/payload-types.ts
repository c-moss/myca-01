/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  auth: {
    users: UserAuthOperations;
  };
  collections: {
    users: User;
    imageAssets: ImageAsset;
    'card-benefits': CardBenefit;
    'card-type': CardType;
    'product-type': ProductType;
    'card-product': CardProduct;
    feature: Feature;
    'payload-locked-documents': PayloadLockedDocument;
    'payload-preferences': PayloadPreference;
    'payload-migrations': PayloadMigration;
  };
  collectionsJoins: {};
  collectionsSelect: {
    users: UsersSelect<false> | UsersSelect<true>;
    imageAssets: ImageAssetsSelect<false> | ImageAssetsSelect<true>;
    'card-benefits': CardBenefitsSelect<false> | CardBenefitsSelect<true>;
    'card-type': CardTypeSelect<false> | CardTypeSelect<true>;
    'product-type': ProductTypeSelect<false> | ProductTypeSelect<true>;
    'card-product': CardProductSelect<false> | CardProductSelect<true>;
    feature: FeatureSelect<false> | FeatureSelect<true>;
    'payload-locked-documents': PayloadLockedDocumentsSelect<false> | PayloadLockedDocumentsSelect<true>;
    'payload-preferences': PayloadPreferencesSelect<false> | PayloadPreferencesSelect<true>;
    'payload-migrations': PayloadMigrationsSelect<false> | PayloadMigrationsSelect<true>;
  };
  db: {
    defaultIDType: string;
  };
  globals: {};
  globalsSelect: {};
  locale: null;
  user: User & {
    collection: 'users';
  };
  jobs: {
    tasks: unknown;
    workflows: unknown;
  };
}
export interface UserAuthOperations {
  forgotPassword: {
    email: string;
    password: string;
  };
  login: {
    email: string;
    password: string;
  };
  registerFirstUser: {
    email: string;
    password: string;
  };
  unlock: {
    email: string;
    password: string;
  };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  loginAttempts?: number | null;
  lockUntil?: string | null;
  password?: string | null;
}
/**
 * A single image asset that can be used in various places throughout the app.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "imageAssets".
 */
export interface ImageAsset {
  id: string;
  name: string;
  imageAltText: string;
  url?: string | null;
  thumbnailURL?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
  sizes?: {
    thumbnail?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
    tile?: {
      url?: string | null;
      width?: number | null;
      height?: number | null;
      mimeType?: string | null;
      filesize?: number | null;
      filename?: string | null;
    };
  };
}
/**
 * Defines the structure of a cards benefits page in the MYCA app. Represents either the Rewards page or the Membership page. Contains an arbitrary number of sections, each containing a list of image tiles.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "card-benefits".
 */
export interface CardBenefit {
  id: string;
  'benefits-type': 'card-rewards' | 'card-membership';
  'benefits-section'?:
    | {
        'section-title': string;
        tile?:
          | {
              description: string;
              url: string;
              image: string | ImageAsset;
              'card-products'?: (string | CardProduct)[] | null;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
}
/**
 * Represents a card product e.g. Centurion, Platinum, Gold, etc. Card product id should match the id used in the API.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "card-product".
 */
export interface CardProduct {
  id: string;
  'card-product-name': string;
  'card-product-id': string;
}
/**
 * Represents a card type e.g. Primary or Supplementary. Short code should be a unique identifier for the card type.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "card-type".
 */
export interface CardType {
  id: string;
  'card-type-code': string;
  'card-type-name': string;
}
/**
 * Represents a product type e.g. Lending, Charge, Corporate, etc. Short code should be a unique identifier for the product type.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-type".
 */
export interface ProductType {
  id: string;
  'product-type-code': string;
  'product-type-name': string;
}
/**
 * Describes a configurable feature within the application. Features are used to enable or disable functionality within the app.
 *
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "feature".
 */
export interface Feature {
  id: string;
  'feature-code': string;
  'feature-name': string;
  'disabled-card-types'?: (string | CardType)[] | null;
  'disabled-product-types'?: (string | ProductType)[] | null;
  'disabled-card-products'?: (string | CardProduct)[] | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents".
 */
export interface PayloadLockedDocument {
  id: string;
  document?:
    | ({
        relationTo: 'users';
        value: string | User;
      } | null)
    | ({
        relationTo: 'imageAssets';
        value: string | ImageAsset;
      } | null)
    | ({
        relationTo: 'card-benefits';
        value: string | CardBenefit;
      } | null)
    | ({
        relationTo: 'card-type';
        value: string | CardType;
      } | null)
    | ({
        relationTo: 'product-type';
        value: string | ProductType;
      } | null)
    | ({
        relationTo: 'card-product';
        value: string | CardProduct;
      } | null)
    | ({
        relationTo: 'feature';
        value: string | Feature;
      } | null);
  globalSlug?: string | null;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: 'users';
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users_select".
 */
export interface UsersSelect<T extends boolean = true> {
  updatedAt?: T;
  createdAt?: T;
  email?: T;
  resetPasswordToken?: T;
  resetPasswordExpiration?: T;
  salt?: T;
  hash?: T;
  loginAttempts?: T;
  lockUntil?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "imageAssets_select".
 */
export interface ImageAssetsSelect<T extends boolean = true> {
  name?: T;
  imageAltText?: T;
  url?: T;
  thumbnailURL?: T;
  filename?: T;
  mimeType?: T;
  filesize?: T;
  width?: T;
  height?: T;
  focalX?: T;
  focalY?: T;
  sizes?:
    | T
    | {
        thumbnail?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
        tile?:
          | T
          | {
              url?: T;
              width?: T;
              height?: T;
              mimeType?: T;
              filesize?: T;
              filename?: T;
            };
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "card-benefits_select".
 */
export interface CardBenefitsSelect<T extends boolean = true> {
  'benefits-type'?: T;
  'benefits-section'?:
    | T
    | {
        'section-title'?: T;
        tile?:
          | T
          | {
              description?: T;
              url?: T;
              image?: T;
              'card-products'?: T;
              id?: T;
            };
        id?: T;
      };
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "card-type_select".
 */
export interface CardTypeSelect<T extends boolean = true> {
  'card-type-code'?: T;
  'card-type-name'?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "product-type_select".
 */
export interface ProductTypeSelect<T extends boolean = true> {
  'product-type-code'?: T;
  'product-type-name'?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "card-product_select".
 */
export interface CardProductSelect<T extends boolean = true> {
  'card-product-name'?: T;
  'card-product-id'?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "feature_select".
 */
export interface FeatureSelect<T extends boolean = true> {
  'feature-code'?: T;
  'feature-name'?: T;
  'disabled-card-types'?: T;
  'disabled-product-types'?: T;
  'disabled-card-products'?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-locked-documents_select".
 */
export interface PayloadLockedDocumentsSelect<T extends boolean = true> {
  document?: T;
  globalSlug?: T;
  user?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences_select".
 */
export interface PayloadPreferencesSelect<T extends boolean = true> {
  user?: T;
  key?: T;
  value?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations_select".
 */
export interface PayloadMigrationsSelect<T extends boolean = true> {
  name?: T;
  batch?: T;
  updatedAt?: T;
  createdAt?: T;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "auth".
 */
export interface Auth {
  [k: string]: unknown;
}


declare module 'payload' {
  export interface GeneratedTypes extends Config {}
}